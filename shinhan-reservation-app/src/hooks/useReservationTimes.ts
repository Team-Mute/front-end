// useReservationTimes.ts ÌååÏùº

import { useState, useEffect, useMemo } from "react";
import { getAvailableTimesApi } from "@/lib/api/reservation";
import { useReservationStore } from "@/store/reservationStore";

interface TimeSlot {
  startTime: string;
  endTime: string;
}

interface UseReservationTimesProps {
  spaceId: number;
  year: number;
  month: number;
  day: number;
  startDate?: string | null;
}

export function useReservationTimes({
  spaceId,
  year,
  month,
  day,
  startDate,
}: UseReservationTimesProps) {
  const [availableTimes, setAvailableTimes] = useState<TimeSlot[]>([]);
  const { time, setReservation } = useReservationStore();

  // ‚úÖ API Ìò∏Ï∂ú (Î≥ÄÍ≤Ω ÏóÜÏùå)
  useEffect(() => {
    if (!startDate) {
      setAvailableTimes([]);
      return;
    }

    const fetchTimes = async () => {
      try {
        const data = await getAvailableTimesApi(spaceId, year, month, day);
        setAvailableTimes(data.availableTimes || []);
      } catch (err) {
        console.error(err);
      }
    };

    fetchTimes();
  }, [spaceId, year, month, day, startDate]);

  // ‚úÖ 30Î∂Ñ Îã®ÏúÑÎ°ú ÏãúÍ∞Ñ Ï™ºÍ∞úÎäî Ìï®Ïàò (Î≥ÄÍ≤Ω ÏóÜÏùå)
  const getTimeSlots = (startTime: string, endTime: string, interval = 30) => {
    const slots: string[] = [];
    let [startHour, startMin] = startTime.split(":").map(Number);
    const [endHour, endMin] = endTime.split(":").map(Number);

    const current = new Date();
    current.setHours(startHour, startMin, 0, 0);

    const end = new Date();
    end.setHours(endHour, endMin, 0, 0);

    while (current <= end) {
      const h = current.getHours().toString().padStart(2, "0");
      const m = current.getMinutes().toString().padStart(2, "0");
      slots.push(`${h}:${m}`);
      current.setMinutes(current.getMinutes() + interval);
    }

    return slots;
  };

  // ‚úÖ ÏãúÏûë ÏãúÍ∞Ñ ÏòµÏÖò (Î≥ÄÍ≤Ω ÏóÜÏùå)
  const startTimeOptions = useMemo(() => {
    return availableTimes
      .flatMap((t) => {
        const slots = getTimeSlots(t.startTime, t.endTime);
        return slots.slice(0, -1);
      })
      .map((time) => ({ label: time, value: time }));
  }, [availableTimes]);

  // ‚úÖ Ï¢ÖÎ£å ÏãúÍ∞Ñ ÏòµÏÖò
  const endTimeOptions = useMemo(() => {
    if (!time?.start) {
      console.log("Ï¢ÖÎ£å Íµ¨Í∞Ñ ÏóÜÏùå");
      return [];
    }

    const targetSlot = availableTimes.find(
      (t) => t.startTime <= time.start && time.start <= t.endTime
    );

    if (!targetSlot) {
      console.log("Ï¢ÖÎ£å Íµ¨Í∞Ñ ÏóÜÏùå2");
      return [];
    }

    const slots = getTimeSlots(targetSlot.startTime, targetSlot.endTime);

    // ÏãúÏûë ÏãúÍ∞Ñ Ïù¥ÌõÑ ÏµúÏÜå 30Î∂ÑÎ∂ÄÌÑ∞
    const startIndex = slots.findIndex((s) => s >= time.start); // üîπ Ïó¨Í∏∞ÏÑú >= Î°ú ÏàòÏ†ï
    if (startIndex === -1) {
      console.log("Ï¢ÖÎ£å Íµ¨Í∞Ñ ÏóÜÏùå3");
      return [];
    }

    console.log(
      "Ï¢ÖÎ£å Íµ¨Í∞Ñ",
      slots.slice(startIndex + 1).map((t) => ({ label: t, value: t }))
    );

    // Ï≤´ Î≤àÏß∏Îäî ÏãúÏûë ÏãúÍ∞ÑÏù¥ÎØÄÎ°ú Ï†úÏô∏ÌïòÍ≥†, Ïã§Ï†ú Ï¢ÖÎ£å ÏãúÍ∞ÑÎ∂ÄÌÑ∞ Î≥¥Ïó¨Ï§å
    return slots.slice(startIndex + 1).map((t) => ({ label: t, value: t }));
  }, [availableTimes, time?.start]);

  // ‚úÖ ÏãúÍ∞Ñ ÏÑ†ÌÉù Ìï∏Îì§Îü¨ (Î≥ÄÍ≤Ω ÏóÜÏùå)
  const handleSelectTime = (start: string, end: string) => {
    setReservation({
      time: { start, end },
    });
  };

  return {
    reservationTime: time,
    startTimeOptions,
    endTimeOptions,
    handleSelectTime,
  };
}
